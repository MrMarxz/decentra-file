/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DecentraFile {
  export type FileStruct = {
    cid: string;
    uploader: AddressLike;
    name: string;
    description: string;
    category: string;
    tags: string[];
    timestamp: BigNumberish;
  };

  export type FileStructOutput = [
    cid: string,
    uploader: string,
    name: string,
    description: string,
    category: string,
    tags: string[],
    timestamp: bigint
  ] & {
    cid: string;
    uploader: string;
    name: string;
    description: string;
    category: string;
    tags: string[];
    timestamp: bigint;
  };
}

export interface DecentraFileInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "deleteFile"
      | "fileCount"
      | "files"
      | "getFile"
      | "getFileCount"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "updateFileMetadata"
      | "updateTags"
      | "uploadFile"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "FileUploaded"
      | "OwnershipTransferred"
      | "TagsUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "deleteFile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fileCount", values?: undefined): string;
  encodeFunctionData(functionFragment: "files", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "getFile",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getFileCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFileMetadata",
    values: [BigNumberish, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTags",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "uploadFile",
    values: [string, string, string, string, string[]]
  ): string;

  decodeFunctionResult(functionFragment: "deleteFile", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fileCount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "files", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getFile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFileCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFileMetadata",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateTags", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "uploadFile", data: BytesLike): Result;
}

export namespace FileUploadedEvent {
  export type InputTuple = [
    fileId: BigNumberish,
    cid: string,
    uploader: AddressLike,
    name: string,
    category: string,
    tags: string[]
  ];
  export type OutputTuple = [
    fileId: bigint,
    cid: string,
    uploader: string,
    name: string,
    category: string,
    tags: string[]
  ];
  export interface OutputObject {
    fileId: bigint;
    cid: string;
    uploader: string;
    name: string;
    category: string;
    tags: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TagsUpdatedEvent {
  export type InputTuple = [fileId: BigNumberish, newTags: string[]];
  export type OutputTuple = [fileId: bigint, newTags: string[]];
  export interface OutputObject {
    fileId: bigint;
    newTags: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DecentraFile extends BaseContract {
  connect(runner?: ContractRunner | null): DecentraFile;
  waitForDeployment(): Promise<this>;

  interface: DecentraFileInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  deleteFile: TypedContractMethod<
    [_fileId: BigNumberish],
    [void],
    "nonpayable"
  >;

  fileCount: TypedContractMethod<[], [bigint], "view">;

  files: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, bigint] & {
        cid: string;
        uploader: string;
        name: string;
        description: string;
        category: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  getFile: TypedContractMethod<
    [_fileId: BigNumberish],
    [DecentraFile.FileStructOutput],
    "view"
  >;

  getFileCount: TypedContractMethod<[], [bigint], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateFileMetadata: TypedContractMethod<
    [
      _fileId: BigNumberish,
      _name: string,
      _description: string,
      _category: string
    ],
    [void],
    "nonpayable"
  >;

  updateTags: TypedContractMethod<
    [_fileId: BigNumberish, _newTags: string[]],
    [void],
    "nonpayable"
  >;

  uploadFile: TypedContractMethod<
    [
      _cid: string,
      _name: string,
      _description: string,
      _category: string,
      _tags: string[]
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "deleteFile"
  ): TypedContractMethod<[_fileId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "fileCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "files"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, bigint] & {
        cid: string;
        uploader: string;
        name: string;
        description: string;
        category: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFile"
  ): TypedContractMethod<
    [_fileId: BigNumberish],
    [DecentraFile.FileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFileCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateFileMetadata"
  ): TypedContractMethod<
    [
      _fileId: BigNumberish,
      _name: string,
      _description: string,
      _category: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateTags"
  ): TypedContractMethod<
    [_fileId: BigNumberish, _newTags: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "uploadFile"
  ): TypedContractMethod<
    [
      _cid: string,
      _name: string,
      _description: string,
      _category: string,
      _tags: string[]
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "FileUploaded"
  ): TypedContractEvent<
    FileUploadedEvent.InputTuple,
    FileUploadedEvent.OutputTuple,
    FileUploadedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TagsUpdated"
  ): TypedContractEvent<
    TagsUpdatedEvent.InputTuple,
    TagsUpdatedEvent.OutputTuple,
    TagsUpdatedEvent.OutputObject
  >;

  filters: {
    "FileUploaded(uint256,string,address,string,string,string[])": TypedContractEvent<
      FileUploadedEvent.InputTuple,
      FileUploadedEvent.OutputTuple,
      FileUploadedEvent.OutputObject
    >;
    FileUploaded: TypedContractEvent<
      FileUploadedEvent.InputTuple,
      FileUploadedEvent.OutputTuple,
      FileUploadedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TagsUpdated(uint256,string[])": TypedContractEvent<
      TagsUpdatedEvent.InputTuple,
      TagsUpdatedEvent.OutputTuple,
      TagsUpdatedEvent.OutputObject
    >;
    TagsUpdated: TypedContractEvent<
      TagsUpdatedEvent.InputTuple,
      TagsUpdatedEvent.OutputTuple,
      TagsUpdatedEvent.OutputObject
    >;
  };
}
